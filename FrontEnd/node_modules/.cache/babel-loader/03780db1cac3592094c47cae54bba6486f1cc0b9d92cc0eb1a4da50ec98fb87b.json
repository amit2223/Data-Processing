{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aj437\\\\Desktop\\\\Projects\\\\Centric\\\\my-app\\\\src\\\\HeatmapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport heatmap from \"heatmap.js\"; // Import the heatmap.js library\nimport moment from \"moment\"; // Import moment.js for date formatting\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:8080/api/data\"; // API URL to fetch data\n\nconst HeatmapComponent = () => {\n  _s();\n  const [heatmapData, setHeatmapData] = useState([]);\n  const [startTime, setStartTime] = useState(null);\n  const [endTime, setEndTime] = useState(null);\n\n  // Fetch heatmap data on component mount\n  useEffect(() => {\n    fetch(`${API_URL}/heatmap`).then(res => res.json()).then(data => {\n      setHeatmapData(data);\n\n      // Set startTime and endTime based on first and last timestamp\n      if (data.length > 0) {\n        setStartTime(data[0].timestamp); // First timestamp\n        setEndTime(data[data.length - 1].timestamp); // Last timestamp\n      }\n      createHeatmap(data); // Create the heatmap after data is fetched\n    }).catch(error => {\n      console.error(\"Error fetching heatmap data:\", error);\n    });\n  }, []);\n\n  // Function to format the timestamp to a human-readable format\n  const formatTimestamp = timestamp => {\n    return moment(timestamp).format(\"YYYY-MM-DD HH:mm:ss\"); // You can change the format as needed\n  };\n\n  // Function to create the heatmap\n  const createHeatmap = data => {\n    // Prepare the points from the data (converting them to the format heatmap.js expects)\n    const points = data.map(point => ({\n      x: point.posX,\n      y: point.posY,\n      value: point.intensity\n    }));\n\n    // Initialize the heatmap instance\n    const heatmapInstance = heatmap.create({\n      container: document.getElementById(\"heatmapContainer\") // Container for heatmap\n    });\n\n    // Set the heatmap data\n    heatmapInstance.setData({\n      max: Math.max(...points.map(p => p.value)),\n      // Calculate max intensity\n      data: points\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Positional Heatmap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"heatmapContainer\",\n      style: {\n        width: \"100%\",\n        height: \"500px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Start Time: \", startTime ? formatTimestamp(startTime) : \"Loading...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"End Time: \", endTime ? formatTimestamp(endTime) : \"Loading...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(HeatmapComponent, \"K0R3ITna2kzqophucJodWCcJpkI=\");\n_c = HeatmapComponent;\nexport default HeatmapComponent;\nvar _c;\n$RefreshReg$(_c, \"HeatmapComponent\");","map":{"version":3,"names":["React","useEffect","useState","heatmap","moment","jsxDEV","_jsxDEV","API_URL","HeatmapComponent","_s","heatmapData","setHeatmapData","startTime","setStartTime","endTime","setEndTime","fetch","then","res","json","data","length","timestamp","createHeatmap","catch","error","console","formatTimestamp","format","points","map","point","x","posX","y","posY","value","intensity","heatmapInstance","create","container","document","getElementById","setData","max","Math","p","children","fileName","_jsxFileName","lineNumber","columnNumber","id","style","width","height","_c","$RefreshReg$"],"sources":["C:/Users/aj437/Desktop/Projects/Centric/my-app/src/HeatmapComponent.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport heatmap from \"heatmap.js\"; // Import the heatmap.js library\nimport moment from \"moment\"; // Import moment.js for date formatting\n\nconst API_URL = \"http://localhost:8080/api/data\"; // API URL to fetch data\n\nconst HeatmapComponent = () => {\n  const [heatmapData, setHeatmapData] = useState([]);\n  const [startTime, setStartTime] = useState(null);\n  const [endTime, setEndTime] = useState(null);\n\n  // Fetch heatmap data on component mount\n  useEffect(() => {\n    fetch(`${API_URL}/heatmap`)\n      .then((res) => res.json())\n      .then((data) => {\n        setHeatmapData(data);\n        \n        // Set startTime and endTime based on first and last timestamp\n        if (data.length > 0) {\n          setStartTime(data[0].timestamp); // First timestamp\n          setEndTime(data[data.length - 1].timestamp); // Last timestamp\n        }\n\n        createHeatmap(data); // Create the heatmap after data is fetched\n      })\n      .catch((error) => {\n        console.error(\"Error fetching heatmap data:\", error);\n      });\n  }, []);\n\n  // Function to format the timestamp to a human-readable format\n  const formatTimestamp = (timestamp) => {\n    return moment(timestamp).format(\"YYYY-MM-DD HH:mm:ss\"); // You can change the format as needed\n  };\n\n  // Function to create the heatmap\n  const createHeatmap = (data) => {\n    // Prepare the points from the data (converting them to the format heatmap.js expects)\n    const points = data.map((point) => ({\n      x: point.posX,\n      y: point.posY,\n      value: point.intensity,\n    }));\n\n    // Initialize the heatmap instance\n    const heatmapInstance = heatmap.create({\n      container: document.getElementById(\"heatmapContainer\"), // Container for heatmap\n    });\n\n    // Set the heatmap data\n    heatmapInstance.setData({\n      max: Math.max(...points.map((p) => p.value)), // Calculate max intensity\n      data: points,\n    });\n  };\n\n  return (\n    <div>\n      <h3>Positional Heatmap</h3>\n      <div id=\"heatmapContainer\" style={{ width: \"100%\", height: \"500px\" }}></div> {/* Heatmap container */}\n\n      {/* Displaying the start and end time */}\n      <div>\n        <h4>Start Time: {startTime ? formatTimestamp(startTime) : \"Loading...\"}</h4>\n        <h4>End Time: {endTime ? formatTimestamp(endTime) : \"Loading...\"}</h4>\n      </div>\n    </div>\n  );\n};\n\nexport default HeatmapComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}