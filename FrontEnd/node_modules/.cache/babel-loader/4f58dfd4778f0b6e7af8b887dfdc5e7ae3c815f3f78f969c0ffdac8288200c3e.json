{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aj437\\\\Desktop\\\\Projects\\\\Centric\\\\my-app\\\\src\\\\HeatmapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { HeatMap, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport moment from \"moment\"; // Import moment.js for date formatting\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:8080/api/data\"; // API endpoint\n\nconst HeatmapComponent = ({\n  setStartTime,\n  setEndTime\n}) => {\n  _s();\n  const [heatmapData, setHeatmapData] = useState([]);\n\n  // Fetch heatmap data on component mount\n  useEffect(() => {\n    fetch(`${API_URL}/heatmap`).then(res => res.json()).then(data => {\n      console.log(\"Fetched heatmap data:\", data); // Log data for debugging\n\n      // Set start and end times based on first and last data points\n      if (data.length > 0) {\n        setStartTime(data[0].timestamp); // First timestamp\n        setEndTime(data[data.length - 1].timestamp); // Last timestamp\n      }\n\n      // Format data for the heatmap\n      const formattedData = data.map(point => ({\n        x: point.posX,\n        // X position\n        y: point.posY,\n        // Y position\n        value: point.intensity,\n        // Intensity value\n        timestamp: point.timestamp // Timestamp for tooltip\n      }));\n      setHeatmapData(formattedData);\n    }).catch(error => {\n      console.error(\"Error fetching heatmap data:\", error);\n    });\n  }, []);\n\n  // Format timestamp to a human-readable format using moment.js\n  const formatTimestamp = timestamp => {\n    return moment(timestamp).format(\"YYYY-MM-DD HH:mm:ss\"); // Customize format if needed\n  };\n\n  // Custom Tooltip component to display heatmap data\n  const CustomTooltip = ({\n    payload,\n    label\n  }) => {\n    if (payload && payload.length > 0) {\n      const data = payload[0].payload;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-tooltip\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: `Time: ${formatTimestamp(data.timestamp)}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: `X: ${data.x}, Y: ${data.y}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: `Intensity: ${data.value}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Positional Heatmap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 400,\n      children: /*#__PURE__*/_jsxDEV(HeatMap, {\n        data: heatmapData,\n        children: [/*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"x\",\n          type: \"number\",\n          domain: [0, \"auto\"] // Automatically scale x-axis\n          ,\n          ticks: [0, 5, 10, 15, 20, 25] // Add more divisions on x-axis\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          dataKey: \"y\",\n          type: \"number\",\n          domain: [0, \"auto\"] // Automatically scale y-axis\n          ,\n          ticks: [0, 5, 10, 15, 20, 25] // Add more divisions on y-axis\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          content: /*#__PURE__*/_jsxDEV(CustomTooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(HeatmapComponent, \"6rwSeSRUaCbZ8dM87UctXDg9HWc=\");\n_c = HeatmapComponent;\nexport default HeatmapComponent;\nvar _c;\n$RefreshReg$(_c, \"HeatmapComponent\");","map":{"version":3,"names":["React","useEffect","useState","HeatMap","XAxis","YAxis","Tooltip","Legend","ResponsiveContainer","moment","jsxDEV","_jsxDEV","API_URL","HeatmapComponent","setStartTime","setEndTime","_s","heatmapData","setHeatmapData","fetch","then","res","json","data","console","log","length","timestamp","formattedData","map","point","x","posX","y","posY","value","intensity","catch","error","formatTimestamp","format","CustomTooltip","payload","label","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","dataKey","type","domain","ticks","content","_c","$RefreshReg$"],"sources":["C:/Users/aj437/Desktop/Projects/Centric/my-app/src/HeatmapComponent.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { HeatMap, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport moment from \"moment\"; // Import moment.js for date formatting\n\nconst API_URL = \"http://localhost:8080/api/data\"; // API endpoint\n\nconst HeatmapComponent = ({ setStartTime, setEndTime }) => {\n  const [heatmapData, setHeatmapData] = useState([]);\n\n  // Fetch heatmap data on component mount\n  useEffect(() => {\n    fetch(`${API_URL}/heatmap`)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(\"Fetched heatmap data:\", data); // Log data for debugging\n\n        // Set start and end times based on first and last data points\n        if (data.length > 0) {\n          setStartTime(data[0].timestamp); // First timestamp\n          setEndTime(data[data.length - 1].timestamp); // Last timestamp\n        }\n\n        // Format data for the heatmap\n        const formattedData = data.map((point) => ({\n          x: point.posX, // X position\n          y: point.posY, // Y position\n          value: point.intensity, // Intensity value\n          timestamp: point.timestamp, // Timestamp for tooltip\n        }));\n\n        setHeatmapData(formattedData);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching heatmap data:\", error);\n      });\n  }, []);\n\n  // Format timestamp to a human-readable format using moment.js\n  const formatTimestamp = (timestamp) => {\n    return moment(timestamp).format(\"YYYY-MM-DD HH:mm:ss\"); // Customize format if needed\n  };\n\n  // Custom Tooltip component to display heatmap data\n  const CustomTooltip = ({ payload, label }) => {\n    if (payload && payload.length > 0) {\n      const data = payload[0].payload;\n      return (\n        <div className=\"custom-tooltip\">\n          <p>{`Time: ${formatTimestamp(data.timestamp)}`}</p>\n          <p>{`X: ${data.x}, Y: ${data.y}`}</p>\n          <p>{`Intensity: ${data.value}`}</p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div>\n      <h3>Positional Heatmap</h3>\n\n      {/* Heatmap Display */}\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <HeatMap data={heatmapData}>\n          <XAxis\n            dataKey=\"x\"\n            type=\"number\"\n            domain={[0, \"auto\"]} // Automatically scale x-axis\n            ticks={[0, 5, 10, 15, 20, 25]} // Add more divisions on x-axis\n          />\n          <YAxis\n            dataKey=\"y\"\n            type=\"number\"\n            domain={[0, \"auto\"]} // Automatically scale y-axis\n            ticks={[0, 5, 10, 15, 20, 25]} // Add more divisions on y-axis\n          />\n          <Tooltip content={<CustomTooltip />} />\n          <Legend />\n        </HeatMap>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default HeatmapComponent;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,OAAO,EAAEC,MAAM,EAAEC,mBAAmB,QAAQ,UAAU;AACtF,OAAOC,MAAM,MAAM,QAAQ,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,OAAO,GAAG,gCAAgC,CAAC,CAAC;;AAElD,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC,YAAY;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EACzD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;;EAElD;EACAD,SAAS,CAAC,MAAM;IACdkB,KAAK,CAAC,GAAGP,OAAO,UAAU,CAAC,CACxBQ,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAK;MACdC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEF,IAAI,CAAC,CAAC,CAAC;;MAE5C;MACA,IAAIA,IAAI,CAACG,MAAM,GAAG,CAAC,EAAE;QACnBZ,YAAY,CAACS,IAAI,CAAC,CAAC,CAAC,CAACI,SAAS,CAAC,CAAC,CAAC;QACjCZ,UAAU,CAACQ,IAAI,CAACA,IAAI,CAACG,MAAM,GAAG,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC,CAAC;MAC/C;;MAEA;MACA,MAAMC,aAAa,GAAGL,IAAI,CAACM,GAAG,CAAEC,KAAK,KAAM;QACzCC,CAAC,EAAED,KAAK,CAACE,IAAI;QAAE;QACfC,CAAC,EAAEH,KAAK,CAACI,IAAI;QAAE;QACfC,KAAK,EAAEL,KAAK,CAACM,SAAS;QAAE;QACxBT,SAAS,EAAEG,KAAK,CAACH,SAAS,CAAE;MAC9B,CAAC,CAAC,CAAC;MAEHT,cAAc,CAACU,aAAa,CAAC;IAC/B,CAAC,CAAC,CACDS,KAAK,CAAEC,KAAK,IAAK;MAChBd,OAAO,CAACc,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,eAAe,GAAIZ,SAAS,IAAK;IACrC,OAAOlB,MAAM,CAACkB,SAAS,CAAC,CAACa,MAAM,CAAC,qBAAqB,CAAC,CAAC,CAAC;EAC1D,CAAC;;EAED;EACA,MAAMC,aAAa,GAAGA,CAAC;IAAEC,OAAO;IAAEC;EAAM,CAAC,KAAK;IAC5C,IAAID,OAAO,IAAIA,OAAO,CAAChB,MAAM,GAAG,CAAC,EAAE;MACjC,MAAMH,IAAI,GAAGmB,OAAO,CAAC,CAAC,CAAC,CAACA,OAAO;MAC/B,oBACE/B,OAAA;QAAKiC,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAC7BlC,OAAA;UAAAkC,QAAA,EAAI,SAASN,eAAe,CAAChB,IAAI,CAACI,SAAS,CAAC;QAAE;UAAAmB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACnDtC,OAAA;UAAAkC,QAAA,EAAI,MAAMtB,IAAI,CAACQ,CAAC,QAAQR,IAAI,CAACU,CAAC;QAAE;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACrCtC,OAAA;UAAAkC,QAAA,EAAI,cAActB,IAAI,CAACY,KAAK;QAAE;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChC,CAAC;IAEV;IACA,OAAO,IAAI;EACb,CAAC;EAED,oBACEtC,OAAA;IAAAkC,QAAA,gBACElC,OAAA;MAAAkC,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAG3BtC,OAAA,CAACH,mBAAmB;MAAC0C,KAAK,EAAC,MAAM;MAACC,MAAM,EAAE,GAAI;MAAAN,QAAA,eAC5ClC,OAAA,CAACR,OAAO;QAACoB,IAAI,EAAEN,WAAY;QAAA4B,QAAA,gBACzBlC,OAAA,CAACP,KAAK;UACJgD,OAAO,EAAC,GAAG;UACXC,IAAI,EAAC,QAAQ;UACbC,MAAM,EAAE,CAAC,CAAC,EAAE,MAAM,CAAE,CAAC;UAAA;UACrBC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAE,CAAC;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChC,CAAC,eACFtC,OAAA,CAACN,KAAK;UACJ+C,OAAO,EAAC,GAAG;UACXC,IAAI,EAAC,QAAQ;UACbC,MAAM,EAAE,CAAC,CAAC,EAAE,MAAM,CAAE,CAAC;UAAA;UACrBC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAE,CAAC;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChC,CAAC,eACFtC,OAAA,CAACL,OAAO;UAACkD,OAAO,eAAE7C,OAAA,CAAC8B,aAAa;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACvCtC,OAAA,CAACJ,MAAM;UAAAuC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACS,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnB,CAAC;AAEV,CAAC;AAACjC,EAAA,CA5EIH,gBAAgB;AAAA4C,EAAA,GAAhB5C,gBAAgB;AA8EtB,eAAeA,gBAAgB;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}