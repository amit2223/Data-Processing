{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aj437\\\\Desktop\\\\Projects\\\\Centric\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer } from \"recharts\";\nimport heatmap from \"heatmap.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:8080/api/data\"; // Update this if your backend URL is different\n\nconst Dashboard = () => {\n  _s();\n  const [graphData, setGraphData] = useState([]);\n  const [heatmapData, setHeatmapData] = useState([]);\n  const [selectedMetric, setSelectedMetric] = useState(\"total_humans\");\n  useEffect(() => {\n    fetch(`${API_URL}/graph?metric=${selectedMetric}`).then(res => res.json()).then(data => setGraphData(data));\n  }, [selectedMetric]);\n  useEffect(() => {\n    fetch(`${API_URL}/heatmap`).then(res => res.json()).then(data => {\n      setHeatmapData(data);\n      updateHeatmap(data);\n    });\n  }, [graphData]);\n  const updateHeatmap = data => {\n    const heatmapInstance = heatmap.create({\n      container: document.getElementById(\"heatmapContainer\"),\n      radius: 20\n    });\n    const formattedData = data.map(d => ({\n      x: d.posX,\n      y: d.posY,\n      value: d[selectedMetric]\n    }));\n    heatmapInstance.setData({\n      max: 100,\n      data: formattedData\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: e => setSelectedMetric(e.target.value),\n      value: selectedMetric,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"total_humans\",\n        children: \"Total Humans\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"avg_x\",\n        children: \"Average X Position\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"avg_y\",\n        children: \"Average Y Position\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 300,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: graphData,\n        children: [/*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"timestamp\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: selectedMetric,\n          stroke: \"#8884d8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"heatmapContainer\",\n      style: {\n        width: \"100%\",\n        height: \"400px\",\n        position: \"relative\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"4zh2MY9DuZ+UWWh08xYqGjZddtQ=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","LineChart","Line","XAxis","YAxis","Tooltip","ResponsiveContainer","heatmap","jsxDEV","_jsxDEV","API_URL","Dashboard","_s","graphData","setGraphData","heatmapData","setHeatmapData","selectedMetric","setSelectedMetric","fetch","then","res","json","data","updateHeatmap","heatmapInstance","create","container","document","getElementById","radius","formattedData","map","d","x","posX","y","posY","value","setData","max","children","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","width","height","dataKey","type","stroke","id","style","position","_c","$RefreshReg$"],"sources":["C:/Users/aj437/Desktop/Projects/Centric/my-app/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer } from \"recharts\";\nimport heatmap from \"heatmap.js\";\n\nconst API_URL = \"http://localhost:8080/api/data\"; // Update this if your backend URL is different\n\nconst Dashboard = () => {\n  const [graphData, setGraphData] = useState([]);\n  const [heatmapData, setHeatmapData] = useState([]);\n  const [selectedMetric, setSelectedMetric] = useState(\"total_humans\");\n\n  useEffect(() => {\n    fetch(`${API_URL}/graph?metric=${selectedMetric}`)\n      .then((res) => res.json())\n      .then((data) => setGraphData(data));\n  }, [selectedMetric]);\n\n  useEffect(() => {\n    fetch(`${API_URL}/heatmap`)\n      .then((res) => res.json())\n      .then((data) => {\n        setHeatmapData(data);\n        updateHeatmap(data);\n      });\n  }, [graphData]); \n\n  const updateHeatmap = (data) => {\n    const heatmapInstance = heatmap.create({\n      container: document.getElementById(\"heatmapContainer\"),\n      radius: 20,\n    });\n\n    const formattedData = data.map((d) => ({\n      x: d.posX,\n      y: d.posY,\n      value: d[selectedMetric], \n    }));\n\n    heatmapInstance.setData({ max: 100, data: formattedData });\n  };\n\n  return (\n    <div>\n      {/* Dropdown Menu */}\n      <select onChange={(e) => setSelectedMetric(e.target.value)} value={selectedMetric}>\n        <option value=\"total_humans\">Total Humans</option>\n        <option value=\"avg_x\">Average X Position</option>\n        <option value=\"avg_y\">Average Y Position</option>\n      </select>\n\n      {/* Graph Component */}\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart data={graphData}>\n          <XAxis dataKey=\"timestamp\" />\n          <YAxis />\n          <Tooltip />\n          <Line type=\"monotone\" dataKey={selectedMetric} stroke=\"#8884d8\" />\n        </LineChart>\n      </ResponsiveContainer>\n\n      {/* Heatmap Component */}\n      <div id=\"heatmapContainer\" style={{ width: \"100%\", height: \"400px\", position: \"relative\" }}></div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}