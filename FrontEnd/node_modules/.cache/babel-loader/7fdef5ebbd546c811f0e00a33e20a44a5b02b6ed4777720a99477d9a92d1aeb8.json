{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aj437\\\\Desktop\\\\Projects\\\\Centric\\\\my-app\\\\src\\\\HeatmapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport heatmap from \"heatmap.js\"; // Import heatmap.js for heatmap rendering\nimport moment from \"moment\"; // For formatting timestamps\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:8080/api/data\"; // API endpoint\n\nconst HeatmapComponent = ({\n  setStartTime,\n  setEndTime\n}) => {\n  _s();\n  const [heatmapData, setHeatmapData] = useState([]);\n\n  // Fetch heatmap data on component mount\n  useEffect(() => {\n    fetch(`${API_URL}/heatmap`).then(res => res.json()).then(data => {\n      console.log(\"Fetched heatmap data:\", data); // Log data for debugging\n\n      // Set start and end times based on first and last data points\n      if (data.length > 0) {\n        setStartTime(data[0].timestamp); // First timestamp\n        setEndTime(data[data.length - 1].timestamp); // Last timestamp\n      }\n\n      // Format data for the heatmap\n      const formattedData = data.map(point => ({\n        x: point.posX,\n        // X position\n        y: point.posY,\n        // Y position\n        value: point.intensity,\n        // Intensity value\n        timestamp: point.timestamp // Timestamp for tooltip\n      }));\n      setHeatmapData(formattedData);\n\n      // Create the heatmap\n      createHeatmap(formattedData);\n    }).catch(error => {\n      console.error(\"Error fetching heatmap data:\", error);\n    });\n  }, [setStartTime, setEndTime]); // Add dependencies to fix the warning\n\n  // Format timestamp to a human-readable format using moment.js\n  const formatTimestamp = timestamp => {\n    return moment(timestamp).format(\"YYYY-MM-DD HH:mm:ss\"); // Customize format if needed\n  };\n\n  // Function to create the heatmap using heatmap.js\n  const createHeatmap = data => {\n    // Get the container element\n    const container = document.getElementById(\"heatmapContainer\");\n\n    // Initialize the heatmap instance\n    const heatmapInstance = heatmap.create({\n      container: container,\n      // The container where the heatmap will be drawn\n      radius: 30,\n      // Adjust radius as needed\n      maxOpacity: 0.5,\n      // Maximum opacity of the heatmap\n      minOpacity: 0,\n      // Minimum opacity of the heatmap\n      blur: 0.85 // Blur factor for the heatmap\n    });\n\n    // Prepare data for heatmap.js\n    const points = data.map(point => ({\n      x: Math.floor(point.x / 100 * container.offsetWidth),\n      // Scale x to fit container width\n      y: Math.floor(point.y / 100 * container.offsetHeight),\n      // Scale y to fit container height\n      value: point.value // Intensity value\n    }));\n    console.log(\"Formatted points for heatmap:\", points); // Check the points array\n\n    // Set the heatmap data\n    heatmapInstance.setData({\n      max: Math.max(...points.map(p => p.value)),\n      // Maximum intensity value\n      data: points // Array of data points\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Positional Heatmap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"heatmapContainer\",\n      style: {\n        width: \"100%\",\n        height: \"500px\",\n        position: \"relative\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Start Time: \", heatmapData.length > 0 ? formatTimestamp(heatmapData[0].timestamp) : \"Loading...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"End Time: \", heatmapData.length > 0 ? formatTimestamp(heatmapData[heatmapData.length - 1].timestamp) : \"Loading...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(HeatmapComponent, \"6rwSeSRUaCbZ8dM87UctXDg9HWc=\");\n_c = HeatmapComponent;\nexport default HeatmapComponent;\nvar _c;\n$RefreshReg$(_c, \"HeatmapComponent\");","map":{"version":3,"names":["React","useEffect","useState","heatmap","moment","jsxDEV","_jsxDEV","API_URL","HeatmapComponent","setStartTime","setEndTime","_s","heatmapData","setHeatmapData","fetch","then","res","json","data","console","log","length","timestamp","formattedData","map","point","x","posX","y","posY","value","intensity","createHeatmap","catch","error","formatTimestamp","format","container","document","getElementById","heatmapInstance","create","radius","maxOpacity","minOpacity","blur","points","Math","floor","offsetWidth","offsetHeight","setData","max","p","children","fileName","_jsxFileName","lineNumber","columnNumber","id","style","width","height","position","_c","$RefreshReg$"],"sources":["C:/Users/aj437/Desktop/Projects/Centric/my-app/src/HeatmapComponent.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport heatmap from \"heatmap.js\"; // Import heatmap.js for heatmap rendering\nimport moment from \"moment\"; // For formatting timestamps\n\nconst API_URL = \"http://localhost:8080/api/data\"; // API endpoint\n\nconst HeatmapComponent = ({ setStartTime, setEndTime }) => {\n  const [heatmapData, setHeatmapData] = useState([]);\n\n  // Fetch heatmap data on component mount\n  useEffect(() => {\n    fetch(`${API_URL}/heatmap`)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(\"Fetched heatmap data:\", data); // Log data for debugging\n\n        // Set start and end times based on first and last data points\n        if (data.length > 0) {\n          setStartTime(data[0].timestamp); // First timestamp\n          setEndTime(data[data.length - 1].timestamp); // Last timestamp\n        }\n\n        // Format data for the heatmap\n        const formattedData = data.map((point) => ({\n          x: point.posX, // X position\n          y: point.posY, // Y position\n          value: point.intensity, // Intensity value\n          timestamp: point.timestamp, // Timestamp for tooltip\n        }));\n\n        setHeatmapData(formattedData);\n\n        // Create the heatmap\n        createHeatmap(formattedData);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching heatmap data:\", error);\n      });\n  }, [setStartTime, setEndTime]); // Add dependencies to fix the warning\n\n  // Format timestamp to a human-readable format using moment.js\n  const formatTimestamp = (timestamp) => {\n    return moment(timestamp).format(\"YYYY-MM-DD HH:mm:ss\"); // Customize format if needed\n  };\n\n  // Function to create the heatmap using heatmap.js\n  const createHeatmap = (data) => {\n    // Get the container element\n    const container = document.getElementById(\"heatmapContainer\");\n\n    // Initialize the heatmap instance\n    const heatmapInstance = heatmap.create({\n      container: container, // The container where the heatmap will be drawn\n      radius: 30, // Adjust radius as needed\n      maxOpacity: 0.5, // Maximum opacity of the heatmap\n      minOpacity: 0, // Minimum opacity of the heatmap\n      blur: 0.85, // Blur factor for the heatmap\n    });\n\n    // Prepare data for heatmap.js\n    const points = data.map((point) => ({\n      x: Math.floor((point.x / 100) * container.offsetWidth), // Scale x to fit container width\n      y: Math.floor((point.y / 100) * container.offsetHeight), // Scale y to fit container height\n      value: point.value, // Intensity value\n    }));\n\n    console.log(\"Formatted points for heatmap:\", points); // Check the points array\n\n    // Set the heatmap data\n    heatmapInstance.setData({\n      max: Math.max(...points.map((p) => p.value)), // Maximum intensity value\n      data: points, // Array of data points\n    });\n  };\n\n  return (\n    <div>\n      <h3>Positional Heatmap</h3>\n\n      {/* Heatmap container */}\n      <div\n        id=\"heatmapContainer\"\n        style={{\n          width: \"100%\",\n          height: \"500px\",\n          position: \"relative\",\n        }}\n      ></div>\n\n      {/* Displaying start and end time */}\n      <div>\n        <h4>Start Time: {heatmapData.length > 0 ? formatTimestamp(heatmapData[0].timestamp) : \"Loading...\"}</h4>\n        <h4>End Time: {heatmapData.length > 0 ? formatTimestamp(heatmapData[heatmapData.length - 1].timestamp) : \"Loading...\"}</h4>\n      </div>\n    </div>\n  );\n};\n\nexport default HeatmapComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}