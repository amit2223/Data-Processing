{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aj437\\\\Desktop\\\\Projects\\\\Centric\\\\my-app\\\\src\\\\HeatmapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport heatmap from \"heatmap.js\"; // Import heatmap.js for heatmap rendering\nimport moment from \"moment\"; // For formatting timestamps\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:8080/api/data\"; // API endpoint\n\nconst HeatmapComponent = () => {\n  _s();\n  const [startTime, setStartTime] = useState(null);\n  const [endTime, setEndTime] = useState(null);\n\n  // Fetch heatmap data on component mount\n  useEffect(() => {\n    fetch(`${API_URL}/heatmap`).then(res => res.json()).then(data => {\n      console.log(\"Fetched heatmap data:\", data); // Log data for debugging\n\n      // Set start and end times based on first and last data points\n      if (data.length > 0) {\n        setStartTime(data[0].timestamp); // First timestamp\n        setEndTime(data[data.length - 1].timestamp); // Last timestamp\n      }\n\n      // Create heatmap after data is fetched\n      createHeatmap(data);\n    }).catch(error => {\n      console.error(\"Error fetching heatmap data:\", error);\n    });\n  }, []);\n\n  // Format timestamp to a human-readable format using moment.js\n  const formatTimestamp = timestamp => {\n    return moment(timestamp).format(\"YYYY-MM-DD HH:mm:ss\"); // Customize format if needed\n  };\n\n  // Function to create the heatmap using heatmap.js\n  const createHeatmap = data => {\n    // Get the dimensions of the heatmap container\n    const container = document.getElementById(\"heatmapContainer\");\n    const containerWidth = container.offsetWidth;\n    const containerHeight = container.offsetHeight;\n\n    // Find the maximum x and y values in the data\n    const maxX = Math.max(...data.map(point => point.posX));\n    const maxY = Math.max(...data.map(point => point.posY));\n\n    // Prepare data for heatmap.js\n    const points = data.map(point => ({\n      x: Math.floor(point.posX / maxX * containerWidth),\n      // Scale x to fit container width\n      y: Math.floor(point.posY / maxY * containerHeight),\n      // Scale y to fit container height\n      value: point.intensity // Use intensity from DTO\n    }));\n    console.log(\"Formatted points for heatmap:\", points); // Check the points array\n\n    // Initialize the heatmap instance\n    const heatmapInstance = heatmap.create({\n      container: container,\n      // The container where the heatmap will be drawn\n      radius: 30,\n      // Adjust radius as needed\n      maxOpacity: 0.5,\n      // Maximum opacity of the heatmap\n      minOpacity: 0,\n      // Minimum opacity of the heatmap\n      blur: 0.85 // Blur factor for the heatmap\n    });\n    console.log(\"Heatmap instance created:\", heatmapInstance); // Log the instance\n\n    // Set the heatmap data\n    heatmapInstance.setData({\n      max: Math.max(...points.map(p => p.value)),\n      // Maximum intensity value\n      data: points // Array of data points\n    });\n\n    // Optional: Add x and y axes\n    addAxes(containerWidth, containerHeight, maxX, maxY);\n  };\n\n  // Function to add x and y axes (optional)\n  const addAxes = (width, height, maxX, maxY) => {\n    const container = document.getElementById(\"heatmapContainer\");\n\n    // Create x-axis\n    const xAxis = document.createElement(\"div\");\n    xAxis.style.position = \"absolute\";\n    xAxis.style.bottom = \"0\";\n    xAxis.style.left = \"0\";\n    xAxis.style.width = \"100%\";\n    xAxis.style.height = \"20px\";\n    xAxis.style.borderTop = \"1px solid black\";\n    xAxis.style.textAlign = \"center\";\n    xAxis.innerText = `X-Axis (0 to ${maxX})`;\n    container.appendChild(xAxis);\n\n    // Create y-axis\n    const yAxis = document.createElement(\"div\");\n    yAxis.style.position = \"absolute\";\n    yAxis.style.top = \"0\";\n    yAxis.style.left = \"0\";\n    yAxis.style.width = \"20px\";\n    yAxis.style.height = \"100%\";\n    yAxis.style.borderRight = \"1px solid black\";\n    yAxis.style.textAlign = \"center\";\n    yAxis.style.display = \"flex\";\n    yAxis.style.alignItems = \"center\";\n    yAxis.style.justifyContent = \"center\";\n    yAxis.innerText = `Y-Axis (0 to ${maxY})`;\n    container.appendChild(yAxis);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Positional Heatmap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"heatmapContainer\",\n      style: {\n        width: \"100%\",\n        height: \"500px\",\n        position: \"relative\",\n        border: \"1px solid red\" // Add border for debugging\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Start Time: \", startTime ? formatTimestamp(startTime) : \"Loading...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"End Time: \", endTime ? formatTimestamp(endTime) : \"Loading...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s(HeatmapComponent, \"+DULdeaJ1BSZmoXsPzMaGx/v2mM=\");\n_c = HeatmapComponent;\nexport default HeatmapComponent;\nvar _c;\n$RefreshReg$(_c, \"HeatmapComponent\");","map":{"version":3,"names":["React","useEffect","useState","heatmap","moment","jsxDEV","_jsxDEV","API_URL","HeatmapComponent","_s","startTime","setStartTime","endTime","setEndTime","fetch","then","res","json","data","console","log","length","timestamp","createHeatmap","catch","error","formatTimestamp","format","container","document","getElementById","containerWidth","offsetWidth","containerHeight","offsetHeight","maxX","Math","max","map","point","posX","maxY","posY","points","x","floor","y","value","intensity","heatmapInstance","create","radius","maxOpacity","minOpacity","blur","setData","p","addAxes","width","height","xAxis","createElement","style","position","bottom","left","borderTop","textAlign","innerText","appendChild","yAxis","top","borderRight","display","alignItems","justifyContent","children","fileName","_jsxFileName","lineNumber","columnNumber","id","border","_c","$RefreshReg$"],"sources":["C:/Users/aj437/Desktop/Projects/Centric/my-app/src/HeatmapComponent.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport heatmap from \"heatmap.js\"; // Import heatmap.js for heatmap rendering\nimport moment from \"moment\"; // For formatting timestamps\n\nconst API_URL = \"http://localhost:8080/api/data\"; // API endpoint\n\nconst HeatmapComponent = () => {\n  const [startTime, setStartTime] = useState(null);\n  const [endTime, setEndTime] = useState(null);\n\n  // Fetch heatmap data on component mount\n  useEffect(() => {\n    fetch(`${API_URL}/heatmap`)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(\"Fetched heatmap data:\", data); // Log data for debugging\n\n        // Set start and end times based on first and last data points\n        if (data.length > 0) {\n          setStartTime(data[0].timestamp); // First timestamp\n          setEndTime(data[data.length - 1].timestamp); // Last timestamp\n        }\n\n        // Create heatmap after data is fetched\n        createHeatmap(data);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching heatmap data:\", error);\n      });\n  }, []);\n\n  // Format timestamp to a human-readable format using moment.js\n  const formatTimestamp = (timestamp) => {\n    return moment(timestamp).format(\"YYYY-MM-DD HH:mm:ss\"); // Customize format if needed\n  };\n\n  // Function to create the heatmap using heatmap.js\n  const createHeatmap = (data) => {\n    // Get the dimensions of the heatmap container\n    const container = document.getElementById(\"heatmapContainer\");\n    const containerWidth = container.offsetWidth;\n    const containerHeight = container.offsetHeight;\n\n    // Find the maximum x and y values in the data\n    const maxX = Math.max(...data.map((point) => point.posX));\n    const maxY = Math.max(...data.map((point) => point.posY));\n\n    // Prepare data for heatmap.js\n    const points = data.map((point) => ({\n      x: Math.floor((point.posX / maxX) * containerWidth), // Scale x to fit container width\n      y: Math.floor((point.posY / maxY) * containerHeight), // Scale y to fit container height\n      value: point.intensity, // Use intensity from DTO\n    }));\n\n    console.log(\"Formatted points for heatmap:\", points); // Check the points array\n\n    // Initialize the heatmap instance\n    const heatmapInstance = heatmap.create({\n      container: container, // The container where the heatmap will be drawn\n      radius: 30, // Adjust radius as needed\n      maxOpacity: 0.5, // Maximum opacity of the heatmap\n      minOpacity: 0, // Minimum opacity of the heatmap\n      blur: 0.85, // Blur factor for the heatmap\n    });\n\n    console.log(\"Heatmap instance created:\", heatmapInstance); // Log the instance\n\n    // Set the heatmap data\n    heatmapInstance.setData({\n      max: Math.max(...points.map((p) => p.value)), // Maximum intensity value\n      data: points, // Array of data points\n    });\n\n    // Optional: Add x and y axes\n    addAxes(containerWidth, containerHeight, maxX, maxY);\n  };\n\n  // Function to add x and y axes (optional)\n  const addAxes = (width, height, maxX, maxY) => {\n    const container = document.getElementById(\"heatmapContainer\");\n\n    // Create x-axis\n    const xAxis = document.createElement(\"div\");\n    xAxis.style.position = \"absolute\";\n    xAxis.style.bottom = \"0\";\n    xAxis.style.left = \"0\";\n    xAxis.style.width = \"100%\";\n    xAxis.style.height = \"20px\";\n    xAxis.style.borderTop = \"1px solid black\";\n    xAxis.style.textAlign = \"center\";\n    xAxis.innerText = `X-Axis (0 to ${maxX})`;\n    container.appendChild(xAxis);\n\n    // Create y-axis\n    const yAxis = document.createElement(\"div\");\n    yAxis.style.position = \"absolute\";\n    yAxis.style.top = \"0\";\n    yAxis.style.left = \"0\";\n    yAxis.style.width = \"20px\";\n    yAxis.style.height = \"100%\";\n    yAxis.style.borderRight = \"1px solid black\";\n    yAxis.style.textAlign = \"center\";\n    yAxis.style.display = \"flex\";\n    yAxis.style.alignItems = \"center\";\n    yAxis.style.justifyContent = \"center\";\n    yAxis.innerText = `Y-Axis (0 to ${maxY})`;\n    container.appendChild(yAxis);\n  };\n\n  return (\n    <div>\n      <h3>Positional Heatmap</h3>\n      {/* Heatmap container */}\n      <div\n        id=\"heatmapContainer\"\n        style={{\n          width: \"100%\",\n          height: \"500px\",\n          position: \"relative\",\n          border: \"1px solid red\", // Add border for debugging\n        }}\n      ></div>\n\n      {/* Displaying start and end time */}\n      <div>\n        <h4>Start Time: {startTime ? formatTimestamp(startTime) : \"Loading...\"}</h4>\n        <h4>End Time: {endTime ? formatTimestamp(endTime) : \"Loading...\"}</h4>\n      </div>\n    </div>\n  );\n};\n\nexport default HeatmapComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}