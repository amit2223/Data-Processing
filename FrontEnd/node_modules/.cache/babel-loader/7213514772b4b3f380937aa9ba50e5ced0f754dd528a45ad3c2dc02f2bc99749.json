{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aj437\\\\Desktop\\\\Projects\\\\Centric\\\\my-app\\\\src\\\\HeatmapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport heatmap from \"heatmap.js\"; // Import heatmap.js for heatmap rendering\nimport moment from \"moment\"; // For formatting timestamps\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:8080/api/data\"; // API endpoint\n\nconst HeatmapComponent = () => {\n  _s();\n  const [startTime, setStartTime] = useState(null);\n  const [endTime, setEndTime] = useState(null);\n\n  // Fetch heatmap data on component mount\n  useEffect(() => {\n    fetch(`${API_URL}/heatmap`).then(res => res.json()).then(data => {\n      console.log(\"Fetched heatmap data:\", data); // Log data for debugging\n\n      // Set start and end times based on first and last data points\n      if (data.length > 0) {\n        setStartTime(data[0].timestamp); // First timestamp\n        setEndTime(data[data.length - 1].timestamp); // Last timestamp\n      }\n\n      // Create heatmap after data is fetched\n      createHeatmap(data);\n    }).catch(error => {\n      console.error(\"Error fetching heatmap data:\", error);\n    });\n  }, []);\n\n  // Format timestamp to a human-readable format using moment.js\n  const formatTimestamp = timestamp => {\n    return moment(timestamp).format(\"YYYY-MM-DD HH:mm:ss\"); // Customize format if needed\n  };\n\n  // Function to create the heatmap using heatmap.js\n  const createHeatmap = data => {\n    // Prepare data for heatmap.js\n    const points = data.map(point => ({\n      x: Math.floor(point.posX),\n      // Ensure x is an integer\n      y: Math.floor(point.posY),\n      // Ensure y is an integer\n      value: point.intensity // Use intensity from DTO\n    }));\n    console.log(\"Formatted points for heatmap:\", points); // Check the points array\n\n    // Initialize the heatmap instance\n    const heatmapInstance = heatmap.create({\n      container: document.getElementById(\"heatmapContainer\"),\n      // The container where the heatmap will be drawn\n      radius: 30,\n      // Adjust radius as needed\n      maxOpacity: 0.5,\n      // Maximum opacity of the heatmap\n      minOpacity: 0,\n      // Minimum opacity of the heatmap\n      blur: 0.85 // Blur factor for the heatmap\n    });\n    console.log(\"Heatmap instance created:\", heatmapInstance); // Log the instance\n\n    // Set the heatmap data\n    heatmapInstance.setData({\n      max: Math.max(...points.map(p => p.value)),\n      // Maximum intensity value\n      data: points // Array of data points\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Positional Heatmap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"heatmapContainer\",\n      style: {\n        width: \"100%\",\n        height: \"500px\",\n        position: \"relative\",\n        border: \"1px solid red\" // Add border for debugging\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Start Time: \", startTime ? formatTimestamp(startTime) : \"Loading...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"End Time: \", endTime ? formatTimestamp(endTime) : \"Loading...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(HeatmapComponent, \"+DULdeaJ1BSZmoXsPzMaGx/v2mM=\");\n_c = HeatmapComponent;\nexport default HeatmapComponent;\nvar _c;\n$RefreshReg$(_c, \"HeatmapComponent\");","map":{"version":3,"names":["React","useEffect","useState","heatmap","moment","jsxDEV","_jsxDEV","API_URL","HeatmapComponent","_s","startTime","setStartTime","endTime","setEndTime","fetch","then","res","json","data","console","log","length","timestamp","createHeatmap","catch","error","formatTimestamp","format","points","map","point","x","Math","floor","posX","y","posY","value","intensity","heatmapInstance","create","container","document","getElementById","radius","maxOpacity","minOpacity","blur","setData","max","p","children","fileName","_jsxFileName","lineNumber","columnNumber","id","style","width","height","position","border","_c","$RefreshReg$"],"sources":["C:/Users/aj437/Desktop/Projects/Centric/my-app/src/HeatmapComponent.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport heatmap from \"heatmap.js\"; // Import heatmap.js for heatmap rendering\nimport moment from \"moment\"; // For formatting timestamps\n\nconst API_URL = \"http://localhost:8080/api/data\"; // API endpoint\n\nconst HeatmapComponent = () => {\n  const [startTime, setStartTime] = useState(null);\n  const [endTime, setEndTime] = useState(null);\n\n  // Fetch heatmap data on component mount\n  useEffect(() => {\n    fetch(`${API_URL}/heatmap`)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(\"Fetched heatmap data:\", data); // Log data for debugging\n\n        // Set start and end times based on first and last data points\n        if (data.length > 0) {\n          setStartTime(data[0].timestamp); // First timestamp\n          setEndTime(data[data.length - 1].timestamp); // Last timestamp\n        }\n\n        // Create heatmap after data is fetched\n        createHeatmap(data);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching heatmap data:\", error);\n      });\n  }, []);\n\n  // Format timestamp to a human-readable format using moment.js\n  const formatTimestamp = (timestamp) => {\n    return moment(timestamp).format(\"YYYY-MM-DD HH:mm:ss\"); // Customize format if needed\n  };\n\n  // Function to create the heatmap using heatmap.js\n  const createHeatmap = (data) => {\n    // Prepare data for heatmap.js\n    const points = data.map((point) => ({\n      x: Math.floor(point.posX), // Ensure x is an integer\n      y: Math.floor(point.posY), // Ensure y is an integer\n      value: point.intensity, // Use intensity from DTO\n    }));\n\n    console.log(\"Formatted points for heatmap:\", points); // Check the points array\n\n    // Initialize the heatmap instance\n    const heatmapInstance = heatmap.create({\n      container: document.getElementById(\"heatmapContainer\"), // The container where the heatmap will be drawn\n      radius: 30, // Adjust radius as needed\n      maxOpacity: 0.5, // Maximum opacity of the heatmap\n      minOpacity: 0, // Minimum opacity of the heatmap\n      blur: 0.85, // Blur factor for the heatmap\n    });\n\n    console.log(\"Heatmap instance created:\", heatmapInstance); // Log the instance\n\n    // Set the heatmap data\n    heatmapInstance.setData({\n      max: Math.max(...points.map((p) => p.value)), // Maximum intensity value\n      data: points, // Array of data points\n    });\n  };\n\n  return (\n    <div>\n      <h3>Positional Heatmap</h3>\n      {/* Heatmap container */}\n      <div\n        id=\"heatmapContainer\"\n        style={{\n          width: \"100%\",\n          height: \"500px\",\n          position: \"relative\",\n          border: \"1px solid red\", // Add border for debugging\n        }}\n      ></div>\n\n      {/* Displaying start and end time */}\n      <div>\n        <h4>Start Time: {startTime ? formatTimestamp(startTime) : \"Loading...\"}</h4>\n        <h4>End Time: {endTime ? formatTimestamp(endTime) : \"Loading...\"}</h4>\n      </div>\n    </div>\n  );\n};\n\nexport default HeatmapComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}